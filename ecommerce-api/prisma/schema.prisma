// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeliveryStatus {
  PROCESSING
  SHIPPING
  RETURNED
  COMPLETED
  CANCELED
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  slug        String   @unique
  product     String
  description String
  stock       Int
  unitPrice   Decimal  @map("unit_price") @db.Decimal(12, 2)
  images      String[]
  version     Int      @default(0) // For optimistic locking
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  orders      Order[]
  
  
  @@index([slug])
  @@map("products")
}

model Customer {
  id         String   @id @default(uuid()) @db.Uuid
  customerId String   @unique @map("customer_id") // Format: ${id_type}${personal_id}
  fullname   String
  email      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  orders      Order[]
  
  @@index([customerId])
  @@map("customers")
}

model Order {
  id           String         @id @default(uuid()) @db.Uuid
  product      Product        @relation(fields: [productId], references: [id])
  productId    String         @map("product_id") @db.Uuid
  quantity     Int
  unitPrice    Decimal        @map("unit_price") @db.Decimal(10, 2)
  deliveryFee  Decimal        @map("delivery_fee") @db.Decimal(10, 2)
  customer     Customer       @relation(fields: [customerId], references: [id])
  customerId   String         @map("customer_id") @db.Uuid
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  address      OrderAddress   @relation(fields: [addressId], references: [id])
  addressId    String         @map("address_id") @db.Uuid
  deliveries   Delivery[]
  transactions Transaction[]

  @@map("orders")
}

model OrderAddress {
  id           String     @id @default(uuid()) @db.Uuid
  addressLine1 String     @map("address_line_1")
  addressLine2 String?    @map("address_line_2")
  country      String     @default("CO")
  region       String
  city         String
  postalCode   String?    @map("postal_code")
  contactName  String?    @map("contact_name")
  phoneNumber  String?    @map("phone_number")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  orders       Order[]
  
  
  @@map("order_addresses")
}

model Delivery {
  id        String            @id @default(uuid()) @db.Uuid
  order     Order             @relation(fields: [orderId], references: [id])
  orderId   String            @map("order_id") @db.Uuid
  status    DeliveryStatus    @default(PROCESSING)
  addressId String            @map("address_id") @db.Uuid
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  @@map("deliveries")
}

model Transaction {
  id         String   @id @default(uuid()) @db.Uuid
  externalId String   @map("external_id")
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @map("order_id") @db.Uuid
  status     String // PENDING, APPROVED, DECLINED, VOIDED, ERROR (external provider status)
  amount     Decimal  @db.Decimal(10, 2)
  details    Json
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([externalId])
  @@map("transactions")
}